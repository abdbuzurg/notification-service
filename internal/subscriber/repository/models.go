// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package repository

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type NotificationChannel string

const (
	NotificationChannelEMAIL    NotificationChannel = "EMAIL"
	NotificationChannelSMS      NotificationChannel = "SMS"
	NotificationChannelPUSH     NotificationChannel = "PUSH"
	NotificationChannelTELEGRAM NotificationChannel = "TELEGRAM"
)

func (e *NotificationChannel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NotificationChannel(s)
	case string:
		*e = NotificationChannel(s)
	default:
		return fmt.Errorf("unsupported scan type for NotificationChannel: %T", src)
	}
	return nil
}

type NullNotificationChannel struct {
	NotificationChannel NotificationChannel `json:"notification_channel"`
	Valid               bool                `json:"valid"` // Valid is true if NotificationChannel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNotificationChannel) Scan(value interface{}) error {
	if value == nil {
		ns.NotificationChannel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NotificationChannel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNotificationChannel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NotificationChannel), nil
}

type NotificationStatus string

const (
	NotificationStatusPENDING   NotificationStatus = "PENDING"
	NotificationStatusSENT      NotificationStatus = "SENT"
	NotificationStatusDELIVERED NotificationStatus = "DELIVERED"
	NotificationStatusFAILED    NotificationStatus = "FAILED"
	NotificationStatusREAD      NotificationStatus = "READ"
	NotificationStatusBOUNCED   NotificationStatus = "BOUNCED"
)

func (e *NotificationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NotificationStatus(s)
	case string:
		*e = NotificationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for NotificationStatus: %T", src)
	}
	return nil
}

type NullNotificationStatus struct {
	NotificationStatus NotificationStatus `json:"notification_status"`
	Valid              bool               `json:"valid"` // Valid is true if NotificationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNotificationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.NotificationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NotificationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNotificationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NotificationStatus), nil
}

type Notification struct {
	ID           int64               `json:"id"`
	UserID       sql.NullInt64       `json:"user_id"`
	Channel      NotificationChannel `json:"channel"`
	Recipient    string              `json:"recipient"`
	Subject      sql.NullString      `json:"subject"`
	Body         sql.NullString      `json:"body"`
	Status       NotificationStatus  `json:"status"`
	Source       string              `json:"source"`
	RetryCount   sql.NullInt32       `json:"retry_count"`
	ErrorMessage sql.NullString      `json:"error_message"`
	CreatedAt    sql.NullTime        `json:"created_at"`
	SentAt       sql.NullTime        `json:"sent_at"`
}
