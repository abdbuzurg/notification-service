// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: notification.sql

package repository

import (
	"context"
	"database/sql"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (user_id, channel, recipient, subject, body, source)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, channel, recipient, subject, body, status, source, retry_count, error_message, created_at, sent_at
`

type CreateNotificationParams struct {
	UserID    sql.NullInt64       `json:"user_id"`
	Channel   NotificationChannel `json:"channel"`
	Recipient string              `json:"recipient"`
	Subject   sql.NullString      `json:"subject"`
	Body      sql.NullString      `json:"body"`
	Source    string              `json:"source"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification,
		arg.UserID,
		arg.Channel,
		arg.Recipient,
		arg.Subject,
		arg.Body,
		arg.Source,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Channel,
		&i.Recipient,
		&i.Subject,
		&i.Body,
		&i.Status,
		&i.Source,
		&i.RetryCount,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.SentAt,
	)
	return i, err
}

const getNotificationByID = `-- name: GetNotificationByID :one
SELECT id, user_id, channel, recipient, subject, body, status, source, retry_count, error_message, created_at, sent_at FROM notifications WHERE id = $1
`

func (q *Queries) GetNotificationByID(ctx context.Context, id int64) (Notification, error) {
	row := q.db.QueryRow(ctx, getNotificationByID, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Channel,
		&i.Recipient,
		&i.Subject,
		&i.Body,
		&i.Status,
		&i.Source,
		&i.RetryCount,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.SentAt,
	)
	return i, err
}

const listNotificationsByUserID = `-- name: ListNotificationsByUserID :many
SELECT id, user_id, channel, recipient, subject, body, status, source, retry_count, error_message, created_at, sent_at FROM notifications
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListNotificationsByUserID(ctx context.Context, userID sql.NullInt64) ([]Notification, error) {
	rows, err := q.db.Query(ctx, listNotificationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Channel,
			&i.Recipient,
			&i.Subject,
			&i.Body,
			&i.Status,
			&i.Source,
			&i.RetryCount,
			&i.ErrorMessage,
			&i.CreatedAt,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotificationFailure = `-- name: UpdateNotificationFailure :exec
UPDATE notifications
SET 
  status = 'FAILED', 
  error_message = $2, 
  retry_count = retry_count + 1
WHERE id = $1
`

type UpdateNotificationFailureParams struct {
	ID           int64          `json:"id"`
	ErrorMessage sql.NullString `json:"error_message"`
}

func (q *Queries) UpdateNotificationFailure(ctx context.Context, arg UpdateNotificationFailureParams) error {
	_, err := q.db.Exec(ctx, updateNotificationFailure, arg.ID, arg.ErrorMessage)
	return err
}

const updateNotificationSuccess = `-- name: UpdateNotificationSuccess :exec
UPDATE notifications
SET 
  status = 'SENT', 
  sent_at = NOW(), 
  error_message = NULL
WHERE id = $1
`

func (q *Queries) UpdateNotificationSuccess(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateNotificationSuccess, id)
	return err
}
